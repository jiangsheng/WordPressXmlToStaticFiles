using HtmlAgilityPack;
using System.Diagnostics;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

namespace BatchFixes
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var rootPath = "C:\\github\\jiangsheng\\jiangsheng.github.io";
            var blogPath = Path.Combine(rootPath, "docs\\blogs");
            GenerateDescriptionForSeo(rootPath, Path.Combine(rootPath,"docs")
                , Path.Combine(rootPath, "build\\html"));
            //UpdateRedirectFiles(rootPath);
            //GenerateIndexPageForYearAndMonth(blogPath);
            //MoveBlogPostsToFolders(blogPath);
            //UpdateRedirectTxt(rootPath, blogPath);
        }
        public static void GenerateDescriptionForSeo(string rootPath, string sourceRoot, string buildRoot)
        {
            var htmlFiles = Directory.GetFiles(rootPath, "*.html", SearchOption.AllDirectories);            
            CultureInfo enUS = new CultureInfo("en-US");
            foreach (var htmlFile in htmlFiles)
            {
                //redirect pages should not be indexed
                if (!htmlFile.StartsWith(buildRoot))
                    continue;
                var relativeToBuildRoot=Path.GetRelativePath(buildRoot, htmlFile);
                var sourcePath= Path.Combine(sourceRoot, relativeToBuildRoot);
                var sourceFileName=Path.ChangeExtension(sourcePath, ".rst");
                //maybe redirect page generated by extensions
                if (!File.Exists(sourceFileName))
                    continue;
                HtmlAgilityPack.HtmlDocument htmlDoc = new HtmlAgilityPack.HtmlDocument();
                htmlDoc.Load(htmlFile);
                var headNode = htmlDoc.DocumentNode.SelectSingleNode("//head");
                if (headNode == null)
                {
                    Debug.WriteLine($"No head node found in {htmlFile}");
                    continue;
                }
                var descriptionNode = headNode.SelectSingleNode("//meta[@name='description']");
                if (descriptionNode != null)
                {
                    //already has description
                    continue;
                }
                var nodeToKeep = htmlDoc.DocumentNode.SelectSingleNode("//article[@class='bd-article']");
                if (nodeToKeep == null)
                {
                    Debug.WriteLine($"No article node found in {htmlFile}");
                    continue;
                }
                var newBody = HtmlNode.CreateNode("<body></body>");
                newBody.AppendChild(nodeToKeep.Clone());
                var oldBody = htmlDoc.DocumentNode.SelectSingleNode("//body");
                if (oldBody != null)
                {
                    oldBody.RemoveAllChildren(); // optional if replacing
                    oldBody.ParentNode.ReplaceChild(newBody, oldBody);
                }
                else
                {
                    htmlDoc.DocumentNode.AppendChild(newBody);
                }
                var headingNodes = htmlDoc.DocumentNode.SelectNodes("//h1");
                if (headingNodes == null || headingNodes.Count == 0)
                {
                    Debug.WriteLine($"No heading nodes found in {htmlFile}");
                    continue;
                }
                var alternativeDescription = headingNodes[0].InnerText.Trim();

                foreach (var headingNode in headingNodes)
                {
                    headingNode.Remove();
                }
                var tocTreeNodes = htmlDoc.DocumentNode.SelectNodes("//div[class='toctree-wrapper compound']");
                if (tocTreeNodes != null && tocTreeNodes.Count > 0)
                {
                    foreach (var tocTreeNode in tocTreeNodes.ToList())
                    {
                        tocTreeNode.Remove();
                    }
                }

                //now get the first paragraph
                var paragraphNodes = htmlDoc.DocumentNode.SelectNodes("//p");
                string description = string.Empty;
                if (paragraphNodes == null)
                {
                    Debug.WriteLine($"No description found in {htmlFile}, use title: {alternativeDescription}");
                    description = alternativeDescription;
                }
                else 
                {
                    for (int i = 0; i < paragraphNodes.Count; i++)
                    {
                        if (i == 0)
                            description = paragraphNodes[i].InnerText.Trim();
                        else
                            description = string.Format("{0} {1}", 
                                description, 
                                paragraphNodes[i].InnerText.Trim());
                        if (description.Length > 160)
                            break;
                    }
                }

                if (string.IsNullOrWhiteSpace(description))
                {
                    Debug.WriteLine($"No description found in {htmlFile}, use title: {alternativeDescription}");
                    description = alternativeDescription;
                }

                description = Regex.Replace(description, @"\s+", " "); // remove extra spaces
                description = HtmlEntity.DeEntitize(description); // decode HTML entities
                description = description.Length > 160 ? description.Substring(0, 160) : description;
                description = description.Trim();

                
                StringBuilder sb = new StringBuilder();
                var sourceLines=File.ReadAllLines(sourceFileName);
                int metaLine = -1;
                int descriptionLine = -1;
                for (int i = 0; i < sourceLines.Length; i++)
                {
                    if (sourceLines[i].StartsWith(".. meta::"))
                    {
                        metaLine = i;
                    }
                    if (sourceLines[i].StartsWith("   :description:"))
                    {
                        descriptionLine = i;
                    }
                }
                if (descriptionLine != -1) continue; // already has description

                if (metaLine == -1)
                {
                    sb.AppendLine(".. meta::");
                    sb.AppendLine(string.Format("   :description: {0}", description));
                    sb.AppendLine();
                    sb.AppendLine(File.ReadAllText(sourceFileName));
                    File.WriteAllText(sourceFileName, sb.ToString());
                }
                else { 
                    for(int i = 0; i <= metaLine; i++)
                    {
                        sb.AppendLine(sourceLines[i]);
                    }
                    sb.AppendLine(string.Format("   :description: {0}", description));
                    for (int i = metaLine + 1; i < sourceLines.Length; i++)
                    {
                        sb.AppendLine(sourceLines[i]);
                    }
                    File.WriteAllText(sourceFileName, sb.ToString());
                }
            }
        }
        private static void UpdateRedirectTxt(string rootPath, string blogPath)
        {
            var blogBuildPath = Path.Combine(rootPath, "build\\html\\blogs");
            var redirectstxtFile = Path.Combine(rootPath, "docs\\redirects.txt");
            var redirectstxtFileLines = File.ReadAllLines(redirectstxtFile);

            List<string> from = new List<string>();
            List<string> to = new List<string>();
            SortedDictionary<string, string> sd = new SortedDictionary<string, string>();
            foreach (var line in redirectstxtFileLines)
            {
                if (line.Contains("?")) continue;
                var split = line.Split(new char[] { '\"' }, StringSplitOptions.None);
                if (split.Length == 5)
                {
                    from.Add(split[1]);
                    to.Add(split[3]);
                    sd.Add(split[1], split[3]);
                }
            }
            var yearFolders = Directory.GetDirectories(blogPath);
            foreach (var yearFolder in yearFolders)
            {
                string yearFolderName = Path.GetFileName(yearFolder);
                int year;
                if (!int.TryParse(yearFolderName, out year))
                    continue;
                var monthFolders = Directory.GetDirectories(yearFolder);
                foreach (var monthFolder in monthFolders)
                {
                    string monthFolderName = Path.GetFileName(monthFolder);
                    int month;
                    if (!int.TryParse(monthFolderName, out month))
                        continue;
                    var posts = Directory.GetFiles(monthFolder, "*.rst", SearchOption.TopDirectoryOnly);
                    foreach (var post in posts)
                    {
                        string postName = Path.GetFileNameWithoutExtension(post);
                        if (string.Compare(postName, "index", StringComparison.Ordinal) == 0)
                        {
                            continue;
                        }
                        var redirectFileName = Path.GetFileNameWithoutExtension(post);
                        var redirectFilePathName = Path.Combine(blogBuildPath, year.ToString());
                        redirectFilePathName = Path.Combine(redirectFilePathName, post);
                        redirectFilePathName = Path.ChangeExtension(redirectFilePathName, ".html");
                        if (File.Exists(redirectFilePathName))
                            File.Delete(redirectFilePathName);
                        var redirectFrom = string.Format("blogs/{0}/{1}", yearFolderName, postName);
                        var redirectTo = string.Format("blogs/{0}/{1}/{2}", yearFolderName, monthFolderName, postName);
                        if (sd.ContainsKey(redirectFrom))
                        {
                            sd[redirectFrom] = redirectTo;
                        }
                        else
                            sd.Add(redirectFrom, redirectTo);
                    }
                }

            }
            StringBuilder sbRedirect = new StringBuilder();
            foreach (KeyValuePair<string, string> kvp in sd)
            {
                sbRedirect.AppendLine(string.Format("\"{0}\" \"{1}\"", kvp.Key, kvp.Value));
            }
            Debug.WriteLine(sbRedirect.ToString());
            File.WriteAllText(redirectstxtFile, sbRedirect.ToString());
        }

        private static void UpdateRedirectFiles(string rootPath)
        {
            var yearFolders = Directory.GetDirectories(rootPath);
            foreach (var yearFolder in yearFolders)
            {
                string yearFolderName = Path.GetFileName(yearFolder);
                int year;
                if (!int.TryParse(yearFolderName, out year))
                    continue;
                var monthFolders = Directory.GetDirectories(yearFolder);
                foreach (var monthFolder in monthFolders)
                {
                    string monthFolderName = Path.GetFileName(monthFolder);
                    int month;
                    if (!int.TryParse(monthFolderName, out month))
                        continue;
                    var dayFolders = Directory.GetDirectories(monthFolder);
                    foreach (var dayFolder in dayFolders)
                    {
                        string dayFolderName = Path.GetFileName(dayFolder);
                        int day;
                        if (!int.TryParse(dayFolderName, out day))
                            continue;

                        var postFolders = Directory.GetDirectories(dayFolder);
                        foreach (var postFolder in postFolders)
                        {
                            string postName = Path.GetFileNameWithoutExtension(postFolder);

                            var redirectFile = Path.Combine(postFolder, "index.html");

                            StringBuilder sb = new StringBuilder();
                            sb.AppendLine("<!doctype html><html><head>");
                            sb.AppendLine(string.Format("<meta http-equiv=\"refresh\" content=\"0; url=../../../../build/html/blogs/{0}/{1}/{2}.html\">", yearFolderName, monthFolderName, postName));
                            sb.AppendLine("</head><body></body></html>");
                            File.WriteAllText(redirectFile, sb.ToString());
                        }
                    }
                    var monthRedirectFile = Path.Combine(monthFolder, "index.html");
                    StringBuilder sbMonth = new StringBuilder();
                    sbMonth.AppendLine("<!doctype html><html><head>");
                    sbMonth.AppendLine(string.Format("<meta http-equiv=\"refresh\" content=\"0; url=../../build/html/blogs/{0}/{1}/index.html\">", yearFolderName, monthFolderName));
                    sbMonth.AppendLine("</head><body></body></html>");
                    File.WriteAllText(monthRedirectFile, sbMonth.ToString());
                }
                var yearRedirectFile = Path.Combine(yearFolder, "index.html");
                StringBuilder sbYear = new StringBuilder();
                sbYear.AppendLine("<!doctype html><html><head>");
                sbYear.AppendLine(string.Format("<meta http-equiv=\"refresh\" content=\"0; url=../build/html/blogs/{0}/index.html\">", yearFolderName));
                sbYear.AppendLine("</head><body></body></html>");
                File.WriteAllText(yearRedirectFile, sbYear.ToString());
            }
        }

        private static void GenerateIndexPageForYearAndMonth(string blogPath)
        {
            var yearFolders = Directory.GetDirectories(blogPath);
            foreach (var yearFolder in yearFolders)
            {
                string yearFolderName = Path.GetFileName(yearFolder);
                int year;
                if (!int.TryParse(yearFolderName, out year))
                    continue;
                var monthFolders = Directory.GetDirectories(yearFolder);
                StringBuilder sbYearIndex = new StringBuilder();
                sbYearIndex.AppendLine(string.Format(".. _blogs_{0}:", year));
                sbYearIndex.AppendLine();
                sbYearIndex.AppendLine("======================================");
                sbYearIndex.AppendLine(string.Format("Blogs in {0} ", year));
                sbYearIndex.AppendLine("======================================");
                sbYearIndex.AppendLine();
                sbYearIndex.AppendLine(".. toctree::");
                sbYearIndex.AppendLine("   :maxdepth: 1");
                sbYearIndex.AppendLine("   :caption: 内容:");
                sbYearIndex.AppendLine("   :titlesonly:");
                sbYearIndex.AppendLine();
                foreach (var monthFolder in monthFolders)
                {
                    string monthFolderName = Path.GetFileName(monthFolder);
                    int month = int.Parse(monthFolderName);
                    var posts = Directory.GetFiles(monthFolder, "*.rst", SearchOption.TopDirectoryOnly);
                    StringBuilder sb = new StringBuilder();
                    var monthStart = new DateTime(year, month, 1);
                    sb.AppendLine(string.Format(".. _blogs_{0}_{1}:", year, monthStart.ToString("MM")));
                    sb.AppendLine();
                    sb.AppendLine("======================================");
                    sb.AppendLine(string.Format("Blogs in {0} {1}", monthStart.ToString("MMMM"), year));
                    sb.AppendLine("======================================");
                    sb.AppendLine(".. toctree::");
                    sb.AppendLine("   :maxdepth: 1");
                    sb.AppendLine("   :caption: 内容:");
                    sb.AppendLine("   :titlesonly:");
                    sb.AppendLine();
                    foreach (var post in posts)
                    {
                        string postName = Path.GetFileNameWithoutExtension(post);
                        if (string.Compare(postName, "index", StringComparison.Ordinal) == 0)
                        {
                            continue;
                        }
                        sb.AppendLine(string.Format("   {0}", postName));
                    }
                    sb.AppendLine();
                    sb.AppendLine("* :ref:`genindex`");
                    sb.AppendLine("* :ref:`modindex`");
                    sb.AppendLine("* :ref:`search`");
                    var monthIndexFile = Path.Combine(monthFolder, "index.rst");
                    File.WriteAllText(monthIndexFile, sb.ToString());

                    sbYearIndex.AppendLine(
                        string.Format("   Blogs in {0} {1}<{2}/index>"
                        , monthStart.ToString("MMMM")
                        , year
                        , monthStart.ToString("MM")));
                }
                sbYearIndex.AppendLine();
                sbYearIndex.AppendLine("* :ref:`genindex`");
                sbYearIndex.AppendLine("* :ref:`modindex`");
                sbYearIndex.AppendLine("* :ref:`search`");
                var yearIndexFile = Path.Combine(yearFolder, "index.rst");
                File.WriteAllText(yearIndexFile, sbYearIndex.ToString());
            }
        }

        private static void MoveBlogPostsToFolders(string blogPath)
        {
            var blogFiles = Directory.GetFiles(blogPath, "*.rst", SearchOption.AllDirectories);
            var dateFormat = new string[] { "d MMM,yyyy", "d,MMM,yyyy" };
            CultureInfo enUS = new CultureInfo("en-US");
            foreach (var blogFile in blogFiles)
            {
                var fileName = Path.GetFileName(blogFile);
                if (fileName.StartsWith("index"))
                {
                    continue;
                }
                var fileText = File.ReadAllLines(blogFile);
                bool postLineFound = false;
                DateTime? postDate = null;
                foreach (var fileLine in fileText)
                {
                    if (!fileLine.StartsWith(".. post:: "))
                    {
                        continue;
                    }
                    else
                    {
                        DateTime dateTest;
                        postLineFound = true;
                        var dateText = fileLine.Replace(".. post:: ", string.Empty).Trim();
                        if (!DateTime.TryParseExact(dateText, dateFormat,
                           enUS, DateTimeStyles.AllowWhiteSpaces,
                           out dateTest))
                        {
                            Debug.Assert(false, $"Date format error: {dateText}");
                            continue;
                        }
                        postDate = dateTest;
                    }
                }
                if (!postLineFound)
                {
                    Debug.Assert(false, $"No post found: {blogFile}");
                    continue;
                }
                if (postDate.HasValue)
                {
                    var newFileName = Path.Combine(blogPath, postDate.Value.ToString("yyyy\\\\MM"));
                    if (!Directory.Exists(newFileName))
                    {
                        Directory.CreateDirectory(newFileName);
                    }
                    newFileName = Path.Combine(newFileName, fileName);
                    File.Move(blogFile, newFileName);
                }
            }
        }
    }
}
